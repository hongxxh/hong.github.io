<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome</title>
    <url>/2021/01/18/main/</url>
    <content><![CDATA[<p>主要是与技术相关。</p>
<p>还有自己的一些文章分享。</p>
]]></content>
  </entry>
  <entry>
    <title>《深入理解 React 技术栈》 - 笔记</title>
    <url>/2019/08/30/react-notes/</url>
    <content><![CDATA[<p><em>新手入门后，可以加深了解的书籍。但是并没有特别深入。最重要的还是实践，当然研究源码最好了。</em></p>
<a id="more"></a> 
<h4 id="W3C-的模板规范-Web-Components"><a href="#W3C-的模板规范-Web-Components" class="headerlink" title="W3C 的模板规范 Web Components"></a>W3C 的模板规范 Web Components</h4><p>REACT 的三种创建实例方法：</p>
<ol>
<li><code>React.createClass</code> 最古老，兼容性最好</li>
<li><code>ES6 classes。class xx extends Component{...}</code></li>
<li>无状态函数 <code>function xx({}){}</code> 。在适合的情况下，都应该且必须使用无状态组件。无状态组件不像上述两种方法在调用时会创建新实例，它创建时始终保持了一个实例（没有生命周期方法，当然，Recompose 可以通过添加状态，生命周期方法，上下文等来增强函数组件），避免了不必要的检查和内存分配，做到了内部优化。<br>React 中，数据都是自顶向下单向流动的，即从父组件到子组件。通过 props 传递。组件的 props 可以传递节点。React 有一个重要的内置 prop —children，即组件的子组件集合。<br>React.cloneElement 用来克隆 ReactElement，返回一个新的元素。以下用法是等价的：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">React.cloneElement(</span><br><span class="line">  element,</span><br><span class="line">  props,</span><br><span class="line">  children</span><br><span class="line">);</span><br><span class="line">&lt;element.type &#123;...element.props&#125; &#123;...props&#125;&gt;&#123;children&#125;&lt;/element.type&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="React-组件差别"><a href="#React-组件差别" class="headerlink" title="React 组件差别"></a>React 组件差别</h5><table>
<thead>
<tr>
<th align="left">nextElement</th>
<th align="center">实际参数</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">null/false</td>
<td align="center">空</td>
<td align="center">创建 ReactDOMEmptyComponent 组件</td>
</tr>
<tr>
<td align="left">object &amp;&amp; type === string</td>
<td align="center">虚拟 DOM</td>
<td align="center">创建 ReactDOMComponent 组件</td>
</tr>
<tr>
<td align="left">object &amp;&amp; type !== string</td>
<td align="center">React 组件</td>
<td align="center">创建 ReactCompositeComponent 组件</td>
</tr>
<tr>
<td align="left">string/number</td>
<td align="center">字符串/数字</td>
<td align="center">创建 ReactDOMTextComponent 组件</td>
</tr>
</tbody></table>
<p>因为 dom 元素同样没有生命周期，ReactDOMComponent 会对传入的 div，span 等标签通过 switch 进行识别和处理，除此之外流程与 ReactDOMEmptyComponent ，ReactDOMTextComponent 基本相同。</p>
<p>ReactDOM：React 适用于移动端和 web 端，ReactDOM 就是 React 为了操作 web 端的方法。ReactDOM 的 API 非常少，只有 findDOMNode、unmountComponentAtNode 和 render。ReactDOM.render ：很重要，把 React 渲染的 Virtual DOM 渲染到浏览器的 DOM。<br>React中对于 DOM 操作，不仅可以使用 findDOMNode 获得该组件 DOM，还可以使用 refs 获得组件内部的 DOM 结构。（refs 会指向一个组件类的实例，所以可以调用该类定义的任何方法。直接查找 DOM 都是不推荐的）<br>不过，仍然有一些 DOM 操作是 React 无法避免或者正在努力避免的。比如，如果要调用 HTML5 Audio/Video 的 play 方法和 input 的 focus 方法， React 只能使用相应的 DOM 方法来实现。<br>React 提供了事件绑定的功能，但是仍然有一些特殊情况需要自行绑定事件，例如 Popup 等 组件，当点击组件其他区域时可以收缩此类组件。这要求对组件以外的区域(一般指 document 和 body)进行事件绑定。<br>React 中使用 DOM 最多的还是计算 DOM 的尺寸(即位置信息)。</p>
<h4 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h4><p>Virtual DOM 实际上是在浏览器端用 JavaScript 实现的一套 DOM API，它之于 React 就好似一个虚拟空间，包括一整套 Virtual DOM 模型、生命周期的维护和管理、性能高效的 diff 算法和 将 Virtual DOM 展示为原生 DOM 的 Patch 方法等。（新代码的 virtual dom 概念没有了，换成了 fiber，所有的 diff 操作都是基于 fiber 的。不过基本原理还是类似的）<br>Virtual DOM 中的节点称为 ReactNode，它分为3种类型 ReactElement、ReactFragment 和 ReactText。</p>
<h5 id="React-diff"><a href="#React-diff" class="headerlink" title="React diff"></a>React diff</h5><p>React diff 算法的 3 个策略。</p>
<ul>
<li>策略一: Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。</li>
<li>策略二: 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</li>
<li>策略三: 对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。</li>
</ul>
<h4 id="React-中的事件"><a href="#React-中的事件" class="headerlink" title="React 中的事件"></a>React 中的事件</h4><p>React 基于 Virtual DOM 实现了一个 SyntheticEvent （合成事件，react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在 jsx 中常见的 onClick、onChange这些都是合成事件）层，开发所定义的事件处理器会接收到一个 SyntheticEvent 对象的实例。所有事件都自动绑定到最外层上。如果需要访问原生事件对象，可以使用 nativeEvent 属性。<br>在 React 底层，主要对合成事件做了两件事：<strong>事件委派和自动绑定</strong>。<br>一、事件委派<br>在使用 React 事件前，一定要熟悉它的事件代理机制。它并不会把事件处理函数直接绑定到真实的节点上，而是把所有事件绑定到结构的最外层，使用一个统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数。当组件挂载或卸载时，只是在这个统一的事件监听器上插入或删除一些对象；当事件发生时，首先被这个统一的事件监听器处理，然后在映射里找到真正的事件处理函数并调用。这样做简化了事件处理和回收机制，效率也有很大提升。<br>二、自动绑定<br>在 React 组件中，每个方法的上下文都会指向该组件的实例，即自动绑定 this 为当前组件。 而且 React 还会对这种引用进行缓存，以达到 CPU 和内存的最优化。在使用 ES6 classes 或者纯 函数时，这种自动绑定就不复存在了，需要手动实现 this 的绑定。</p>
<ul>
<li>bind 方法。this.func.bind(this, …args)</li>
<li>构造器内声明</li>
<li>箭头函数<br>值得注意的是，在 React 中使用 DOM 原生事件时，一定要在组件卸载时手动移除，否则很可能出现内存泄漏的问题。而使用合成事件系统时则不需要，因为 React 内部已经帮开发者妥善地处理了。<br>React 合成事件系统的委托机制，在合成事件内部仅仅对最外层的容器进行了绑定，并且依赖事件的冒泡机制完成了委派。<br>用 reactEvent.nativeEvent. stopPropagation() 来阻止冒泡是不行的。阻止 React 事件冒泡的行为只能用于 React 合成事件系统中，且没办法阻止原生事件的冒泡。反之，在原生事件中的阻止冒泡行为，却可以阻止 React 合成事件的传播。<br>实际上，React 的合成事件系统只是原生 DOM 事件系统的一个子集。它仅仅实现了 DOM Level 3 的事件接口，并且统一了浏览器间的兼容问题。有些事件 React 并没有实现，或者受某些限制没办法去实现，比如 window 的 resize 事件。</li>
</ul>
<p>input， select 等一些 DOM 结构在 React 被称为 <strong>受控组件</strong>。 React 受控组件更新 state 的流程：<br>(1) 可以通过在初始 state 中设置表单的默认值。<br>(2) 每当表单的值发生变化时，调用 onChange 事件处理器。<br>(3) 事件处理器通过合成事件对象 e 拿到改变后的状态，并更新应用的 state。<br>(4) setState 触发视图的重新渲染，完成表单组件值的更新。</p>
<h5 id="React-间的组件通信"><a href="#React-间的组件通信" class="headerlink" title="React 间的组件通信"></a>React 间的组件通信</h5><ul>
<li>父组件向子组件通信：使用 props 属性</li>
<li>子组件向父组件通信：回调函数方法</li>
<li>有嵌套关系的跨级组件通信：向更高级别的组件层层传递 props（不建议，略显冗余）。<br>在 React 中，我们可以使用 context 来实现跨级父子组件间的通信。不过 React 官方并不建议大量使用 context，因为尽管它可以减少逐层传递，但当组件结构复杂的时候，我们并不知道 context 是从哪里传过来的。总体的原则是如果我们真的需要 context，那么建议写成高阶组件来实现。</li>
<li>无嵌套关系的组件通信：自定义事件。处理事件的过程中需要注意，在 componentDidMount 事件中，如果组件挂载完成，再订阅事件;当组件卸载的时候，在 componentWillUnmount 事件中取消事件的订阅。</li>
</ul>
<h4 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h4><p>React 生命周期：挂载、渲染、卸载。无状态组件挂载时只是方法调用，没有新建实例。</p>
<ul>
<li>mounted（实例化）: React Components 被 render 解析生成对应的 DOM 节点并被插入浏览器的 DOM 结构这一过程。<br>   getDefaultProps -&gt; getInitialState() -&gt; getDerivedStateFromProps (componentWillMount 删除) -&gt; render -&gt; componentDidMount</li>
<li>updated（存在期）:一个 mounted 的 React Components 被重新 render 的过程：setState() or setProps()<br>   getDerivedStateFromProps ( componentWinllReceiveProps 删除 ) -&gt; shouldComponentUpdate &lt;-&gt; (componentWillUpdate -&gt; 删除 )  render -&gt; getSnapshotBeforeUpdate (新增) -&gt; componentDidUpdate</li>
<li>unmounted（销毁&amp;清理）: 一个 mounted 的 React Components 对应的 DOM 节点被从 DOM 结构中移除的过程。<br>   componentWillUnmount</li>
</ul>
<h4 id="React-中的-CSS-Modules"><a href="#React-中的-CSS-Modules" class="headerlink" title="React 中的 CSS Modules"></a>React 中的 CSS Modules</h4><ul>
<li>所有样式都是局部化的，解决了命名冲突和全局污染问题;</li>
<li>class 名的生成规则配置灵活，可以以此来压缩 class 名;</li>
<li>只需引用组件的 JavaScript，就能搞定组件所有的 JavaScript 和 CSS;<br>CSS Modules 是使用 composes 来组合样式；<br>CSS Modules 的命名规范是从 BEM 扩展而来的。BEM 把样式名分为 3 个级别，具体如下<br>所示。</li>
<li>Block:对应模块名，如 Dialog。</li>
<li>Element:对应模块中的节点名 Confirm Button。</li>
<li>Modifier:对应节点相关的状态，如 disabled 和 highlight。<br>BEM 最终得到的 class 名为 dialog__confirm-button–highlight。使用双符号 __ 和 – 是为了与区块内单词间的分隔符区分开来。<br>CSS Modules 是对现有的 CSS 做减法。为了追求简单可控，作者建议遵循如下原则:</li>
<li>不使用选择器，只使用 class 名来定义样式;</li>
<li>不层叠多个 class，只使用一个 class 把所有样式定义好; </li>
<li>所有样式通过 composes 组合来实现复用;</li>
<li>不嵌套。<br>由于多数 CSS 项目存在深厚的历史遗留问题，过多的限制就意味着增加迁移成本和与外部合作的成本。<br>在 CSS Modules 中，外部覆盖局部样式，可以通过给组件关键节点加上 data-role 属性，然后通过 属性选择器来覆盖样式。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[data-role=&quot;xxx&quot;] &#123;</span><br><span class="line">  // override style </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>进一步，可以了解 <a href="https://github.com/gajus/react-css-modules" target="_blank" rel="noopener">react-css-modules</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 使用过程中遇到的坑</title>
    <url>/2020/03/12/vue-element/</url>
    <content><![CDATA[<h4 id="DOM-使用"><a href="#DOM-使用" class="headerlink" title="DOM 使用"></a>DOM 使用</h4><h5 id="同一个组件中两个-form-表单相互影响"><a href="#同一个组件中两个-form-表单相互影响" class="headerlink" title="同一个组件中两个 form 表单相互影响"></a>同一个组件中两个 form 表单相互影响</h5><p>问题描述：同一个组件中，两个 v-if 的 form 表单，共享某个检验规则，prop 值不同，但其中一个的规则检验提示也会在另一个表单显示。<br>解决：给两个表单分别加 key 值。<br>原因：没有这个属性的时候， vue 应用 in-place patch（就地复用）策略。一般的作用在列表里的顺序发生改变的时候，比如 shuffle（列表打乱）的时候，vue 为了提升性能，不会移动 dom 元素，只是更新相应元素的内容节点。<br>而在 v-if 中，切换 DOM 结构时也可以用来打破复用。</p>
<a id="more"></a> ]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack 使用</title>
    <url>/2020/01/10/webpack/</url>
    <content><![CDATA[<h3 id="wepback"><a href="#wepback" class="headerlink" title="wepback"></a>wepback</h3><h5 id="webpack-原理"><a href="#webpack-原理" class="headerlink" title="webpack 原理"></a>webpack 原理</h5><p>推荐一个通俗易懂的入门视频：<br><a href="https://www.youtube.com/watch?v=Gc9-7PBqOC8&list=LLHK1mTHpwrUeYgF5gu-Kd4g" target="_blank" rel="noopener">Build Your Own Webpack</a></p>
<a id="more"></a> 
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Taro 使用过程中遇到的坑</title>
    <url>/2019/08/30/taro-bugs/</url>
    <content><![CDATA[<h4 id="Taro-简介"><a href="#Taro-简介" class="headerlink" title="Taro 简介"></a>Taro 简介</h4><p>Taro 是京东凹凸实验室的多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在微信/百度/字节跳动/支付宝/ QQ 小程序、快应用、 H5 、 React Native 等平台的应用。（<del>官方说法</del>）<br>产品要求同时开发 H5 和 小程序，我们考虑到维护和开发效率的问题，决定选择多端统一的开发框架，比较了下目前开源的一些框架，选择了最为可靠的 Taro （<del>嗯，就是 star 数最多</del>）。</p>
<h5 id="这段话很值得思考"><a href="#这段话很值得思考" class="headerlink" title="这段话很值得思考~"></a>这段话很值得思考~</h5><a id="more"></a> 
<p>京东高级前端开发工程师程帅老师说，前端开发框架的本质，当前所有流行的前端框架，抛开使用和实现层面的差异，以及一系列兼容性和性能优化层面的考虑，最终都要回归到 DOM 的操作上。也就是说，只要能够在小程序实现框架所需的 DOM/BOM 的 API ，那就能够将这些前端框架运行在小程序上。而各端小程序处于安全等层面的考虑，都没有把 DOM/BOM API 暴露出来，从而导致各种前端框架无法直接在小程序上运行。<br>Taro 就是给基于小程序的运行时实现了一套 DOM/BOM 的 API，并将这一套 API 和小程序的渲染机制结合起来，从而实现了将各种语法的前端框架运行在小程序上。</p>
<h4 id="微信小程序的坑"><a href="#微信小程序的坑" class="headerlink" title="微信小程序的坑"></a>微信小程序的坑</h4><p>小程序跟 h5 还是有挺大的不同的。Taro 即使号称是统一框架，有些地方也需要特别的处理。</p>
<h5 id="Taro-CSS-样式不支持伪元素和伪类"><a href="#Taro-CSS-样式不支持伪元素和伪类" class="headerlink" title="Taro CSS 样式不支持伪元素和伪类"></a>Taro CSS 样式不支持伪元素和伪类</h5><p>微信小程序是支持伪元素和伪类的，但 Taro 中是不支持的。当然，如果写了 H5 中是生效的。</p>
<h5 id="各组件-CSS-共用问题"><a href="#各组件-CSS-共用问题" class="headerlink" title="各组件 CSS 共用问题"></a>各组件 CSS 共用问题</h5><p>微信小程序默认组件 CSS 相互独立，所以只能通过增加 props 控制 className 的方式来改变在不同组件中的样式。</p>
<h5 id="组件销毁问题"><a href="#组件销毁问题" class="headerlink" title="组件销毁问题"></a>组件销毁问题</h5><p>子组件的阶段 componentUnmont 无效，如果有类似 window.listener 之类的需要销毁，只有页面级 componentDidHide 实现</p>
<h5 id="小程序内嵌-WebView-通信问题"><a href="#小程序内嵌-WebView-通信问题" class="headerlink" title="小程序内嵌 WebView 通信问题"></a>小程序内嵌 WebView 通信问题</h5><p><strong>大坑！</strong></p>
<ol>
<li>小程序的 WebView 只能在特定时机（小程序后退、组件销毁、分享）才能拿到消息</li>
<li>小程序使用 WebView 的外链都得注册，且得写入特定的小程序安全代码（确实安全多了…<br>如果某些操作只能使用 WebView 完成，如支付之类的，建议引导去浏览器或者。类似俄罗斯套娃，先套一个本站的页面，再套一个外部页面，完成操作后后退…</li>
</ol>
<h4 id="JS-的坑"><a href="#JS-的坑" class="headerlink" title="JS 的坑"></a>JS 的坑</h4><h5 id="JS-浮点数运算问题"><a href="#JS-浮点数运算问题" class="headerlink" title="JS 浮点数运算问题"></a>JS 浮点数运算问题</h5><p>JS 存储浮点数机制: 采用的是 IEEE 754 定义的 64 位双精度浮点型来表示。在浮点数运算时，由于计算机无法准确表示大部分小数，而导致精度问题。</p>
<ol>
<li>先对运算的数据全部取整，再通过挪小数点来复原。（这个对乘法运算比较适用）</li>
<li>* 1000  -&gt; 运算 -&gt; / 1000。（注意，这个方法，如果小数较多时也会出现计算差错。）</li>
<li>Math 库。（终极方案）</li>
</ol>
<h5 id="fetch-异步请求中断问题"><a href="#fetch-异步请求中断问题" class="headerlink" title="fetch 异步请求中断问题"></a>fetch 异步请求中断问题</h5><p>fetch 没有 abort 方法。所以无法中断请求。<br>可以用 promise.race ，将所有请求加入 promise 数组，待某一个返回后，“抛弃”其余请求。</p>
<h5 id="fetch-请求-cookie-问题"><a href="#fetch-请求-cookie-问题" class="headerlink" title="fetch 请求 cookie 问题"></a>fetch 请求 cookie 问题</h5><p>Taro 内置的是 fetch 请求。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">By default, fetch won&apos;t send or receive any cookies from the server, resulting in unauthenticated requests if the site relies on maintaining a user session (to send cookies, the credentials init option must be set).</span><br><span class="line">Since Aug 25, 2017. The spec changed the default credentials policy to same-origin. Firefox changed since 61.0b13.</span><br></pre></td></tr></table></figure>

<p>是的，fetch 默认是不会携带 cookie，服务器返回的也不会自动写入，得配置 credentials，无关跨域与否，也无关 get 、 post 方法。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Taro</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/01/18/test/</url>
    <content><![CDATA[<h3 id="just-for-test"><a href="#just-for-test" class="headerlink" title="just for test"></a>just for test</h3>]]></content>
  </entry>
</search>
